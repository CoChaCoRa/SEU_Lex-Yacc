TYPEDEF
STRUCT
IDENTIFIER
{
INT
IDENTIFIER
;
IDENTIFIER
*
IDENTIFIER
;
}
;
VOID
IDENTIFIER
(
INT
*
IDENTIFIER
,
INT
IDENTIFIER
,
INT
IDENTIFIER
)
{
INT
IDENTIFIER
=
IDENTIFIER
,
IDENTIFIER
=
IDENTIFIER
;
INT
IDENTIFIER
=
IDENTIFIER
[
IDENTIFIER
]
;
WHILE
(
IDENTIFIER
<
IDENTIFIER
)
{
FOR
(
;
IDENTIFIER
<
IDENTIFIER
AND_OP
IDENTIFIER
[
IDENTIFIER
]
GE_OP
IDENTIFIER
;
IDENTIFIER
DEC_OP
)
;
IF
(
IDENTIFIER
<
IDENTIFIER
)
{
IDENTIFIER
[
IDENTIFIER
]
=
IDENTIFIER
[
IDENTIFIER
]
;
IDENTIFIER
INC_OP
;
}
FOR
(
;
IDENTIFIER
<
IDENTIFIER
AND_OP
IDENTIFIER
[
IDENTIFIER
]
LE_OP
IDENTIFIER
;
IDENTIFIER
INC_OP
)
;
IF
(
IDENTIFIER
<
IDENTIFIER
)
{
IDENTIFIER
[
IDENTIFIER
]
=
IDENTIFIER
[
IDENTIFIER
]
;
IDENTIFIER
DEC_OP
;
}
}
IDENTIFIER
[
IDENTIFIER
]
=
IDENTIFIER
;
IF
(
IDENTIFIER
-
NUMBER
>
IDENTIFIER
)
{
IDENTIFIER
(
IDENTIFIER
,
IDENTIFIER
,
IDENTIFIER
-
NUMBER
)
;
}
IF
(
IDENTIFIER
+
NUMBER
>
IDENTIFIER
)
{
IDENTIFIER
(
IDENTIFIER
,
IDENTIFIER
+
NUMBER
,
IDENTIFIER
)
;
}
}
INT
IDENTIFIER
(
)
{
INT
IDENTIFIER
=
NUMBER
;
INT
IDENTIFIER
[
NUMBER
]
[
NUMBER
]
;
ENUM
IDENTIFIER
{
IDENTIFIER
=
NUMBER
,
IDENTIFIER
=
NUMBER
,
IDENTIFIER
=
NUMBER
,
IDENTIFIER
=
NUMBER
,
IDENTIFIER
=
NUMBER
,
IDENTIFIER
=
NUMBER
,
IDENTIFIER
=
NUMBER
}
;
IDENTIFIER
IDENTIFIER
;
IDENTIFIER
*
IDENTIFIER
;
BOOL
IDENTIFIER
=
FALSE
;
INT
IDENTIFIER
[
]
=
{
NUMBER
,
NUMBER
,
NUMBER
,
NUMBER
,
NUMBER
,
NUMBER
}
;
IDENTIFIER
ADD_ASSIGN
NUMBER
;
IDENTIFIER
.
IDENTIFIER
=
IDENTIFIER
*
NUMBER
+
IDENTIFIER
;
IDENTIFIER
=
IDENTIFIER
PTR_OP
IDENTIFIER
;
FOR
(
INT
IDENTIFIER
=
NUMBER
;
IDENTIFIER
<
IDENTIFIER
;
INC_OP
IDENTIFIER
)
{
WHILE
(
NOT_OP
IDENTIFIER
)
{
IF
(
IDENTIFIER
.
IDENTIFIER
NE_OP
IDENTIFIER
AND_OP
IDENTIFIER
EQ_OP
FALSE
)
{
IDENTIFIER
=
TRUE
;
}
ELSE
{
IF
(
IDENTIFIER
.
IDENTIFIER
EQ_OP
NUMBER
)
{
IDENTIFIER
.
IDENTIFIER
ADD_ASSIGN
NUMBER
;
}
}
}
}
IDENTIFIER
(
IDENTIFIER
,
NUMBER
,
NUMBER
)
;
RETURN
NUMBER
;
}